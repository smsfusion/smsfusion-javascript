/**
 * SMS Fusion API
 * This is the SMS Fusion API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@smsfusion.com.au
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HLRError', 'model/OutOfCredit', 'model/SMSResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HLRError'), require('../model/OutOfCredit'), require('../model/SMSResult'));
  } else {
    // Browser globals (root is window)
    if (!root.SmsFusionApi) {
      root.SmsFusionApi = {};
    }
    root.SmsFusionApi.SMSApi = factory(root.SmsFusionApi.ApiClient, root.SmsFusionApi.HLRError, root.SmsFusionApi.OutOfCredit, root.SmsFusionApi.SMSResult);
  }
}(this, function(ApiClient, HLRError, OutOfCredit, SMSResult) {
  'use strict';

  /**
   * SMS service.
   * @module api/SMSApi
   * @version 1.0.0
   */

  /**
   * Constructs a new SMSApi. 
   * @alias module:api/SMSApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the sendSMS operation.
     * @callback module:api/SMSApi~sendSMSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SMSResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an SMS
     * Send one or more SMS
     * @param {String} key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;
     * @param {Array.<String>} num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s
     * @param {String} msg Message content to send
     * @param {Object} opts Optional parameters
     * @param {String} opts.from MSISDN or vanity alphanumeric source number
     * @param {String} opts.deliverby UTC encoded time to send the SMS
     * @param {String} opts.dlrcb HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds
     * @param {String} opts.replycb HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds
     * @param {String} opts.replyemail Email address to send replies to
     * @param {Number} opts.validity Time in minutes to keep the SMS valid for
     * @param {String} opts.cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally
     * @param {module:api/SMSApi~sendSMSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SMSResult}
     */
    this.sendSMS = function(key, num, msg, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key == undefined || key == null) {
        throw new Error("Missing the required parameter 'key' when calling sendSMS");
      }

      // verify the required parameter 'num' is set
      if (num == undefined || num == null) {
        throw new Error("Missing the required parameter 'num' when calling sendSMS");
      }

      // verify the required parameter 'msg' is set
      if (msg == undefined || msg == null) {
        throw new Error("Missing the required parameter 'msg' when calling sendSMS");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
        'num': this.apiClient.buildCollectionParam(num, 'csv'),
        'msg': msg,
        'from': opts['from'],
        'deliverby': opts['deliverby'],
        'dlrcb': opts['dlrcb'],
        'replycb': opts['replycb'],
        'replyemail': opts['replyemail'],
        'validity': opts['validity'],
        'cc': opts['cc']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SMSResult;

      return this.apiClient.callApi(
        '/sms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
